# -*- coding: utf-8 -*-
"""AdvanceML_EX1 _Part1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tHRCvNlpn-MYWzYsMNEs5wliNLxotFeK
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader

from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from tqdm import tqdm

################### Complete the code below ###################
# Define a CNN architecture
###############################################################

# Load MNIST dataset
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

train_dataset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
# take a stratified subset of the training data, keeping only 5000 samples, with 500 samples per class
train_targets = train_dataset.targets
train_idx, _ = train_test_split(range(len(train_targets)), train_size=20000, stratify=train_targets)
train_dataset = torch.utils.data.Subset(train_dataset, train_idx)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

test_dataset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

################### Complete the code below ###################
# Initialize the model, loss function, and optimizer
import torch.nn.functional as F
DEVICE = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

# Define and initiate the model
class MnistCnn(nn.Module):
    def __init__(self):
        super().__init__()
        self.pool = nn.MaxPool2d(2, 2)
        self.conv1 = nn.Conv2d(1, 32, 5)
        self.conv2 = nn.Conv2d(32, 64, 5)
        self.fc1 = nn.Linear(1024, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))  # (batch, 1, 28, 28) -> (batch, 32, 12, 12)
        x = self.pool(F.relu(self.conv2(x)))  # (batch, 32, 12, 12) -> (batch, 64, 4, 4)
        x = torch.flatten(x, 1)  # (batch, 80, 4, 4) -> (batch, 1280)
        x = F.relu(self.fc1(x))  # (batch, 1280) -> (batch, 128)
        x = self.fc2(x)  # (batch, 128) -> (batch, 10)
        return x  # return raw logits


model = MnistCnn()
model = model.to(DEVICE)

# Define a Loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=1e-3, momentum=0.9)

################### Complete the code below ###################

# Training loop
val_losses = []
val_accuracies = []
num_epochs = 10
for epoch in range(num_epochs):
    model.train()  # moves the model to training mode
    running_loss = 0.0
    for images, labels in tqdm(train_loader):
        ################### Complete the code below ###################
        # Move images and labels to DEVICE
        images = images.to(DEVICE)
        labels = labels.to(DEVICE)

        # Zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        ###############################################################
        running_loss += loss.item()

    # Validation
    model.eval()  # moves the model to evaluation mode
    correct = 0
    total = 0
    val_loss = 0.0
    with torch.no_grad():  # Temporarily set all the requires_grad flags to false
        for images, labels in tqdm(test_loader):
            # In order to work on the GPU, I added this code
            images = images.to(DEVICE)
            labels = labels.to(DEVICE)
            # End of the code I added

            outputs = model(images)
            loss = criterion(outputs, labels)
            val_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    epoch_loss = running_loss / len(train_loader)
    val_loss /= len(test_loader)
    accuracy = correct / total
    val_losses.append(val_loss)
    val_accuracies.append(accuracy)

################### Complete the code below ###################
# plot the validation loss and accuracy
import plotly.graph_objects as go
from plotly.subplots import make_subplots

epochs = torch.arange(1, 11, 1)
plot = make_subplots(rows=2, cols=1,
                     subplot_titles=("Validation losses as functions of epoch number",
                                     "Validation accuracies as functions of epoch number"))

# Create the first subplot
plot.update_xaxes(title_text="Epochs Number", row=1, col=1)
plot.update_yaxes(title_text="Validation Loss", row=1, col=1)
plot.add_trace(
    go.Scatter(x=epochs, y=val_losses, mode='lines+markers', name='Average validation loss',
               marker=dict(color='#0000FF', size=10)), row=1, col=1
)

# Create the first subplot
plot.update_xaxes(title_text="Epochs Number", row=2, col=1)
plot.update_yaxes(title_text="Accuracy", row=2, col=1)
plot.add_trace(
    go.Scatter(x=epochs, y=val_accuracies, mode='lines+markers', name='Accuracy',
               marker=dict(color='#8B0000', size=10)), row=2, col=1
)
plot.show()